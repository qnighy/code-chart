import { FullMap } from "../utils/full-map";
import {
  CLOSE_PUNCTUATION,
  CONNECTOR_PUNCTUATION,
  CONTROL,
  CURRENCY_SYMBOL,
  DASH_PUNCTUATION,
  DECIMAL_NUMBER,
  ENCLOSING_MARK,
  FINAL_PUNCTUATION,
  FORMAT,
  GENERAL_CATEGORY_UNSPECIFIED,
  INITIAL_PUNCTUATION,
  LETTER_NUMBER,
  LINE_SEPARATOR,
  LOWERCASE_LETTER,
  MATH_SYMBOL,
  MODIFIER_LETTER,
  MODIFIER_SYMBOL,
  NAME_DERIVATION_CJK_COMPATIBILITY_IDEOGRAPH,
  NAME_DERIVATION_CJK_UNIFIED_IDEOGRAPH,
  NAME_DERIVATION_CONTROL,
  NAME_DERIVATION_EGYPTIAN_HIEROGLYPH,
  NAME_DERIVATION_HANGUL_SYLLABLE,
  NAME_DERIVATION_KHITAN_SMALL_SCRIPT_CHARACTER,
  NAME_DERIVATION_NONCHARACTER,
  NAME_DERIVATION_NUSHU_CHARACTER,
  NAME_DERIVATION_PRIVATE_USE,
  NAME_DERIVATION_RESERVED,
  NAME_DERIVATION_SURROGATE,
  NAME_DERIVATION_TANGUT_IDEOGRAPH,
  NAME_DERIVATION_UNSPECIFIED,
  NONSPACING_MARK,
  OPEN_PUNCTUATION,
  OTHER_LETTER,
  OTHER_NUMBER,
  OTHER_PUNCTUATION,
  OTHER_SYMBOL,
  PARAGRAPH_SEPARATOR,
  PRIVATE_USE,
  SPACE_SEPARATOR,
  SPACING_MARK,
  SURROGATE,
  TITLECASE_LETTER,
  UNASSIGNED,
  UPPERCASE_LETTER,
  type GeneralCategory,
  type NameDerivation,
} from "./proto/character_data_pb";

export type NameDerivationOpt =
  | typeof NAME_DERIVATION_UNSPECIFIED
  | NameDerivationReq;
export type NameDerivationReq =
  | typeof NAME_DERIVATION_CONTROL
  | typeof NAME_DERIVATION_RESERVED
  | typeof NAME_DERIVATION_NONCHARACTER
  | typeof NAME_DERIVATION_PRIVATE_USE
  | typeof NAME_DERIVATION_SURROGATE
  | typeof NAME_DERIVATION_HANGUL_SYLLABLE
  | typeof NAME_DERIVATION_CJK_UNIFIED_IDEOGRAPH
  | typeof NAME_DERIVATION_CJK_COMPATIBILITY_IDEOGRAPH
  | typeof NAME_DERIVATION_EGYPTIAN_HIEROGLYPH
  | typeof NAME_DERIVATION_TANGUT_IDEOGRAPH
  | typeof NAME_DERIVATION_NUSHU_CHARACTER
  | typeof NAME_DERIVATION_KHITAN_SMALL_SCRIPT_CHARACTER;

const NAME_DERIVATIONS_SET = new Set<NameDerivationOpt>([
  NAME_DERIVATION_UNSPECIFIED,
  NAME_DERIVATION_CONTROL,
  NAME_DERIVATION_RESERVED,
  NAME_DERIVATION_NONCHARACTER,
  NAME_DERIVATION_PRIVATE_USE,
  NAME_DERIVATION_SURROGATE,
  NAME_DERIVATION_HANGUL_SYLLABLE,
  NAME_DERIVATION_CJK_UNIFIED_IDEOGRAPH,
  NAME_DERIVATION_CJK_COMPATIBILITY_IDEOGRAPH,
  NAME_DERIVATION_EGYPTIAN_HIEROGLYPH,
  NAME_DERIVATION_TANGUT_IDEOGRAPH,
  NAME_DERIVATION_NUSHU_CHARACTER,
  NAME_DERIVATION_KHITAN_SMALL_SCRIPT_CHARACTER,
]);

export function isNameDerivationOpt(
  value: NameDerivation,
): value is NameDerivationOpt {
  return NAME_DERIVATIONS_SET.has(value as NameDerivationOpt);
}

export function isNameDerivationReq(
  value: NameDerivation,
): value is NameDerivationReq {
  return value !== NAME_DERIVATION_UNSPECIFIED && isNameDerivationOpt(value);
}

export type GeneralCategoryOpt =
  | typeof GENERAL_CATEGORY_UNSPECIFIED
  | GeneralCategoryReq;
export type GeneralCategoryReq =
  | typeof UPPERCASE_LETTER
  | typeof LOWERCASE_LETTER
  | typeof TITLECASE_LETTER
  | typeof MODIFIER_LETTER
  | typeof OTHER_LETTER
  | typeof NONSPACING_MARK
  | typeof SPACING_MARK
  | typeof ENCLOSING_MARK
  | typeof DECIMAL_NUMBER
  | typeof LETTER_NUMBER
  | typeof OTHER_NUMBER
  | typeof CONNECTOR_PUNCTUATION
  | typeof DASH_PUNCTUATION
  | typeof OPEN_PUNCTUATION
  | typeof CLOSE_PUNCTUATION
  | typeof INITIAL_PUNCTUATION
  | typeof FINAL_PUNCTUATION
  | typeof OTHER_PUNCTUATION
  | typeof MATH_SYMBOL
  | typeof CURRENCY_SYMBOL
  | typeof MODIFIER_SYMBOL
  | typeof OTHER_SYMBOL
  | typeof SPACE_SEPARATOR
  | typeof LINE_SEPARATOR
  | typeof PARAGRAPH_SEPARATOR
  | typeof CONTROL
  | typeof FORMAT
  | typeof SURROGATE
  | typeof PRIVATE_USE
  | typeof UNASSIGNED;

export const GENERAL_CATEGORIES: readonly GeneralCategoryReq[] = [
  UPPERCASE_LETTER,
  LOWERCASE_LETTER,
  TITLECASE_LETTER,
  MODIFIER_LETTER,
  OTHER_LETTER,
  NONSPACING_MARK,
  SPACING_MARK,
  ENCLOSING_MARK,
  DECIMAL_NUMBER,
  LETTER_NUMBER,
  OTHER_NUMBER,
  CONNECTOR_PUNCTUATION,
  DASH_PUNCTUATION,
  OPEN_PUNCTUATION,
  CLOSE_PUNCTUATION,
  INITIAL_PUNCTUATION,
  FINAL_PUNCTUATION,
  OTHER_PUNCTUATION,
  MATH_SYMBOL,
  CURRENCY_SYMBOL,
  MODIFIER_SYMBOL,
  OTHER_SYMBOL,
  SPACE_SEPARATOR,
  LINE_SEPARATOR,
  PARAGRAPH_SEPARATOR,
  CONTROL,
  FORMAT,
  SURROGATE,
  PRIVATE_USE,
  UNASSIGNED,
];

export const GENERAL_CATEGORY_NAMES: FullMap<GeneralCategoryReq, string> =
  new FullMap([
    [UPPERCASE_LETTER, "Uppercase_Letter"],
    [LOWERCASE_LETTER, "Lowercase_Letter"],
    [TITLECASE_LETTER, "Titlecase_Letter"],
    [MODIFIER_LETTER, "Modifier_Letter"],
    [OTHER_LETTER, "Other_Letter"],
    [NONSPACING_MARK, "Nonspacing_Mark"],
    [SPACING_MARK, "Spacing_Mark"],
    [ENCLOSING_MARK, "Enclosing_Mark"],
    [DECIMAL_NUMBER, "Decimal_Number"],
    [LETTER_NUMBER, "Letter_Number"],
    [OTHER_NUMBER, "Other_Number"],
    [CONNECTOR_PUNCTUATION, "Connector_Punctuation"],
    [DASH_PUNCTUATION, "Dash_Punctuation"],
    [OPEN_PUNCTUATION, "Open_Punctuation"],
    [CLOSE_PUNCTUATION, "Close_Punctuation"],
    [INITIAL_PUNCTUATION, "Initial_Punctuation"],
    [FINAL_PUNCTUATION, "Final_Punctuation"],
    [OTHER_PUNCTUATION, "Other_Punctuation"],
    [MATH_SYMBOL, "Math_Symbol"],
    [CURRENCY_SYMBOL, "Currency_Symbol"],
    [MODIFIER_SYMBOL, "Modifier_Symbol"],
    [OTHER_SYMBOL, "Other_Symbol"],
    [SPACE_SEPARATOR, "Space_Separator"],
    [LINE_SEPARATOR, "Line_Separator"],
    [PARAGRAPH_SEPARATOR, "Paragraph_Separator"],
    [CONTROL, "Control"],
    [FORMAT, "Format"],
    [SURROGATE, "Surrogate"],
    [PRIVATE_USE, "Private_Use"],
    [UNASSIGNED, "Unassigned"],
  ]);

export const GENERAL_CATEGORY_FROM_NAME: ReadonlyMap<
  string,
  GeneralCategoryReq
> = new Map(
  Array.from(GENERAL_CATEGORY_NAMES.entries()).map(([gc, name]) => [name, gc]),
);

export const GENERAL_CATEGORY_SHORTHANDS: FullMap<GeneralCategoryReq, string> =
  new FullMap([
    [UPPERCASE_LETTER, "Lu"],
    [LOWERCASE_LETTER, "Ll"],
    [TITLECASE_LETTER, "Lt"],
    [MODIFIER_LETTER, "Lm"],
    [OTHER_LETTER, "Lo"],
    [NONSPACING_MARK, "Mn"],
    [SPACING_MARK, "Mc"],
    [ENCLOSING_MARK, "Me"],
    [DECIMAL_NUMBER, "Nd"],
    [LETTER_NUMBER, "Nl"],
    [OTHER_NUMBER, "No"],
    [CONNECTOR_PUNCTUATION, "Pc"],
    [DASH_PUNCTUATION, "Pd"],
    [OPEN_PUNCTUATION, "Ps"],
    [CLOSE_PUNCTUATION, "Pe"],
    [INITIAL_PUNCTUATION, "Pi"],
    [FINAL_PUNCTUATION, "Pf"],
    [OTHER_PUNCTUATION, "Po"],
    [MATH_SYMBOL, "Sm"],
    [CURRENCY_SYMBOL, "Sc"],
    [MODIFIER_SYMBOL, "Sk"],
    [OTHER_SYMBOL, "So"],
    [SPACE_SEPARATOR, "Zs"],
    [LINE_SEPARATOR, "Zl"],
    [PARAGRAPH_SEPARATOR, "Zp"],
    [CONTROL, "Cc"],
    [FORMAT, "Cf"],
    [SURROGATE, "Cs"],
    [PRIVATE_USE, "Co"],
    [UNASSIGNED, "Cn"],
  ]);

export const GENERAL_CATEGORY_FROM_SHORTHAND: ReadonlyMap<
  string,
  GeneralCategoryReq
> = new Map(
  Array.from(GENERAL_CATEGORY_SHORTHANDS.entries()).map(([gc, shorthand]) => [
    shorthand,
    gc,
  ]),
);

const GENERAL_CATEGORIES_SET = new Set<GeneralCategoryOpt>([
  GENERAL_CATEGORY_UNSPECIFIED,
  ...GENERAL_CATEGORIES,
]);

export function isGeneralCategoryOpt(
  value: GeneralCategory,
): value is GeneralCategoryOpt {
  return GENERAL_CATEGORIES_SET.has(value as GeneralCategoryOpt);
}

export function isGeneralCategoryReq(
  value: GeneralCategory,
): value is GeneralCategoryReq {
  return value !== GENERAL_CATEGORY_UNSPECIFIED && isGeneralCategoryOpt(value);
}
